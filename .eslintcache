[{"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\index.tsx":"1","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\reportWebVitals.ts":"2","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\App.tsx":"3","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\SearchPage.tsx":"4","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TimePicker.tsx":"5","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\common.ts":"6","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TableCard.tsx":"7","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\RestaurantCard.tsx":"8","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TableTimeTracker.tsx":"9","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\Emailnput.tsx":"10","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\Pickers.tsx":"11","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\SearchButton.tsx":"12","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\ConfirmationCodeModal.tsx":"13"},{"size":500,"mtime":1611652358887,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":529,"mtime":1611652668619,"results":"17","hashOfConfig":"15"},{"size":5506,"mtime":1611657610824,"results":"18","hashOfConfig":"15"},{"size":2785,"mtime":1611144913045,"results":"19","hashOfConfig":"15"},{"size":996,"mtime":1611567121373,"results":"20","hashOfConfig":"15"},{"size":5702,"mtime":1611657558452,"results":"21","hashOfConfig":"15"},{"size":2940,"mtime":1611657598272,"results":"22","hashOfConfig":"15"},{"size":5423,"mtime":1611657589549,"results":"23","hashOfConfig":"15"},{"size":943,"mtime":1611577680349,"results":"24","hashOfConfig":"15"},{"size":2631,"mtime":1611654857960,"results":"25","hashOfConfig":"15"},{"size":1550,"mtime":1611654688099,"results":"26","hashOfConfig":"15"},{"size":1299,"mtime":1611656862492,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1hkh6it",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\index.tsx",[],["59","60"],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\reportWebVitals.ts",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\App.tsx",["61","62"],"import React, {useState} from 'react';\nimport './App.css';\nimport {BrowserRouter, Switch, Route, Link} from \"react-router-dom\";\nimport {SearchPage} from \"./SearchPage\";\nimport {Restaurant} from \"./common\";\n\nclass App extends React.Component<{},Restaurant[]> {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route path={\"/\"}>\n              <SearchPage/>\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\SearchPage.tsx",["63","64","65","66","67","68","69"],"import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card, Checkbox, FormControlLabel,\r\n  Grid, Modal, Switch, TextField\r\n} from \"@material-ui/core\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment, {Moment} from \"moment\";\r\nimport {Host, Restaurant, Table} from \"./common\";\r\nimport \"./restaurant_card.css\"\r\nimport {LoopRounded} from \"@material-ui/icons\";\r\nimport {RestaurantCard} from \"./RestaurantCard\";\r\nimport {DatePicker, EndTimePicker, SeatsCountPicker, StartTimePicker} from \"./Pickers\";\r\nimport {SearchButton} from \"./SearchButton\";\r\nimport {ConfirmationCodeModal} from \"./ConfirmationCodeModal\";\r\n\r\ninterface SearchPageProps {\r\n}\r\n\r\nexport class SearchPageState {\r\n  startTime: Moment = moment();\r\n  endTime: Moment = moment().add(1, \"hour\");\r\n  startDate: Moment = moment();\r\n  seatsCount: number = 2;\r\n  restaurants: Restaurant[] = [];\r\n  state: \"await\" | \"loading\" | \"loaded\" | \"errored\" = \"await\"\r\n  searchAll: boolean = false;\r\n  modalState: \"closed\"|\"awaitingCode\"|\"success\" = \"closed\";\r\n  bookingId: number = 0;\r\n}\r\n\r\nexport const DATEFORMAT = \"HH:mm DD.MM.yyyy\";\r\n\r\n\r\nexport class SearchPage extends React.Component<SearchPageProps, SearchPageState> {\r\n  state: SearchPageState = new SearchPageState();\r\n\r\n  constructor(props: SearchPageProps) {\r\n    super(props);\r\n    this.bookTable = this.bookTable.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  copyDateToDate(a: Moment, target: Moment) {\r\n    return target.year(a.year()).month(a.month()).date(a.date())\r\n  }\r\n\r\n  bookTable(restaurant: Restaurant, table: Table, startTime: Moment, endTime: Moment, email: string): void {\r\n    fetch(Host + `/restaurants/${restaurant.id}/tables/${table.tableNumber}/book`, {\r\n      method: \"POST\", body: JSON.stringify({\r\n        booking_start_datetime: startTime.format(DATEFORMAT),\r\n        booking_end_datetime: endTime.format(DATEFORMAT),\r\n        email: email\r\n      }), mode: \"cors\"\r\n    })\r\n      .then(t => t.json())\r\n      .then(value => this.setState({bookingId: value.bookingId}))\r\n      .then(() => {\r\n        window.addEventListener(\"unload\", function (e) {\r\n          // Cancel the event\r\n          e.preventDefault()\r\n          return '';\r\n        });\r\n      })\r\n      .then(() => this.setState({modalState: 'awaitingCode'}))\r\n  }\r\n\r\n  sendConfirm(code: number): void {\r\n    fetch(Host + `/bookings/${this.state.bookingId}/confirm?code=${code}`, {\r\n      method: \"POST\"\r\n    }).then(() => this.setState({modalState: 'success'}))\r\n      .then(() => new Promise((resolve => setInterval(resolve, 1000))))\r\n      .then(() => this.setState({modalState: 'closed'}))\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({modalState: 'closed'})\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"background\"}>\r\n      <div className={\"form\"}>\r\n        <MuiPickersUtilsProvider utils={MomentUtils}>\r\n          <Grid container justify=\"space-around\" direction={\"column\"}>\r\n            <h1>Поиск ресторана</h1>\r\n            <p>Введите необходимые данные и мы найдём для вас подходящий ресторан</p>\r\n            <DatePicker startDate={this.state.startDate} setDate={datetime => this.setState({startDate: datetime})}/>\r\n            <Grid container wrap={\"nowrap\"} justify=\"space-evenly\" direction={\"row\"}>\r\n              <StartTimePicker startTime={this.state.startTime} endTime={this.state.endTime}\r\n                               setState={v => this.setState(v)}/>\r\n              <EndTimePicker startTime={this.state.startTime} endTime={this.state.endTime}\r\n                             setState={v => this.setState(v)}/>\r\n            </Grid>\r\n            <SeatsCountPicker seatsCount={this.state.seatsCount} setState={v => this.setState(v)}/>\r\n            <FormControlLabel\r\n              control={<Switch checked={!this.state.searchAll}\r\n                               color=\"primary\"\r\n                               onChange={() => this.setState({searchAll: !this.state.searchAll})}\r\n                               name=\"searchAllCheckBox\"/>}\r\n              label={this.state.searchAll ? \"Искать по всем ресторанам\" : \"Искать только подходящие рестораны\"}/>\r\n            <SearchButton setState={v => this.setState(v)} {...this.state}/>\r\n          </Grid>\r\n          <ConfirmationCodeModal modalState={this.state.modalState} sendConfirm={this.sendConfirm.bind(this)}\r\n                                 closeModal={this.closeModal.bind(this)}/>\r\n        </MuiPickersUtilsProvider>\r\n      </div>\r\n      <Grid container direction={\"column\"} className={\"restaurantCards\"}>\r\n        <div id={\"resultAnchor\"}/>\r\n        {this.renderSearchResults()}\r\n      </Grid>\r\n    </div>\r\n  }\r\n\r\n  renderSearchResults() {\r\n    switch (this.state.state) {\r\n      case \"await\":\r\n        return \"\"\r\n      case \"loading\":\r\n        return (<Card className={\"restaurantCardAuxiliary\"}><LoopRounded className={\"spin loadingIcon\"}/></Card>)\r\n      case \"loaded\":\r\n        return this.state.restaurants.map(r => <RestaurantCard key={r.id} restaurant={r} bookTable={this.bookTable}/>)\r\n      case \"errored\":\r\n        return (<Card className={\"restaurantCardAuxiliary\"}>Произошла ошибка при загрузке. Попробуйте через несколько\r\n          минут</Card>)\r\n    }\r\n  }\r\n}","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TimePicker.tsx",["70","71","72"],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\common.ts",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TableCard.tsx",["73","74","75"],"import {Button, Card, Container, Grid, TextField} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport \"./time_tracker.css\"\r\nimport {TableTimeTracker} from \"./TableTimeTracker\";\r\nimport {intersector, Restaurant, Table} from \"./common\";\r\nimport moment, {Moment} from \"moment\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\r\nimport {Link} from \"react-router-dom\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport {EmailInput} from \"./Emailnput\";\r\n\r\n\r\ninterface TableCardProps {\r\n  table: Table;\r\n  restaurant: Restaurant;\r\n  bookTable: (restaurant: Restaurant, table: Table, startTime: Moment, endTime: Moment, email: string) => void;\r\n}\r\n\r\nclass TableTimeTrackerState {\r\n  bookingStart: Moment | undefined;\r\n  bookingEnd: Moment | undefined;\r\n  isBooking: boolean = false;\r\n  intersection: boolean = false;\r\n  email: string = '';\r\n}\r\n\r\nexport function TableCard(props: TableCardProps) {\r\n  const [state, setState] = useState<TableTimeTrackerState>(new TableTimeTrackerState())\r\n\r\n  return <Card className={\"tableCard\"}>\r\n    <div style={{marginBottom: '8px'}}>Столик №{props.table.tableNumber}</div>\r\n    <TableTimeTracker table={props.table} restaurant={props.restaurant} bookingEnd={state.bookingEnd}\r\n                      bookingStart={state.bookingStart}/>\r\n    {state.isBooking ? <OrderForm state={state} setState={setState} props={props}/> :\r\n      <Button className={\"alignRight\"} variant=\"contained\" color=\"primary\" onClick={e => {\r\n\r\n        setState({...state, bookingStart: moment(), bookingEnd: moment(), isBooking: !state.isBooking})\r\n      }}>\r\n        Выбрать время бронирования\r\n      </Button>}\r\n  </Card>\r\n}\r\n\r\nfunction OrderForm({state, setState, props}: {\r\n  state: TableTimeTrackerState, setState: React.Dispatch<TableTimeTrackerState>,\r\n  props: TableCardProps;\r\n}) {\r\n  return <Grid container direction={\"column\"}>\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Grid container wrap={\"nowrap\"} justify=\"space-evenly\" direction={\"row\"}>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Время начала\"\r\n          format={\"HH:mm\"}\r\n          ampm={false}\r\n          value={state.bookingStart}\r\n          onChange={(startTime: MaterialUiPickersDate) => {\r\n            if (startTime) {\r\n              const intersections = props.table.bookings.filter(intersector(startTime)).length\r\n\r\n              const workdayStart = +props.restaurant.workdayStart.substring(0, 2)\r\n              const workdayEnd = +props.restaurant.workdayEnd.substring(0, 2)\r\n              const workdayEndMinute = +props.restaurant.workdayEnd.substring(3, 5)\r\n\r\n              if (startTime.hour() > workdayEnd || (startTime.hour() === workdayEnd && startTime.minute() > workdayEndMinute)) {\r\n                startTime.hour(workdayEnd).minute(workdayEndMinute - 30)\r\n              }\r\n              if (startTime.hour() < workdayStart) {\r\n                startTime.hour(workdayStart).minute(0)\r\n              }\r\n\r\n              if (startTime.isAfter(state.bookingEnd)) {\r\n                setState({\r\n                  ...state,\r\n                  bookingStart: startTime,\r\n                  bookingEnd: startTime.clone().add(30, 'minutes'),\r\n                  intersection: intersections > 0\r\n                })\r\n              } else\r\n                setState({...state, bookingStart: startTime, intersection: intersections > 0})\r\n            }\r\n          }}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}/>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Время окончания\"\r\n          format={\"HH:mm\"}\r\n          ampm={false}\r\n          value={state.bookingEnd}\r\n          onChange={(endTime: MaterialUiPickersDate) => {\r\n            if (endTime) {\r\n              const intersections = props.table.bookings.filter(intersector(endTime)).length\r\n\r\n              const workdayStart = +props.restaurant.workdayStart.substring(0, 2)\r\n              const workdayEnd = +props.restaurant.workdayEnd.substring(0, 2)\r\n              const workdayEndMinute = +props.restaurant.workdayEnd.substring(3, 5)\r\n\r\n              if (endTime.hour() < workdayStart) {\r\n                endTime.hour(workdayStart).minute(30)\r\n              }\r\n              if (endTime.hour() > workdayEnd || (endTime.hour() === workdayEnd && endTime.minute() > workdayEndMinute)) {\r\n                endTime.hour(workdayEnd).minute(workdayEndMinute)\r\n              }\r\n\r\n              if (endTime.isBefore(state.bookingStart))\r\n                setState({\r\n                  ...state,\r\n                  bookingEnd: endTime,\r\n                  bookingStart: endTime.clone().add(-30, 'minutes'),\r\n                  intersection: intersections > 0\r\n                })\r\n              else\r\n                setState({...state, bookingEnd: endTime, intersection: intersections > 0})\r\n            }\r\n          }}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}/>\r\n        <EmailInput value={state.email} setValue={value => setState({...state, email: value})}/>\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n    <Container>\r\n      <Button className={\"alignRight\"} variant=\"contained\" color=\"primary\" onClick={e => {\r\n        props.bookTable(props.restaurant, props.table, state.bookingStart as Moment,\r\n          state.bookingEnd as Moment, state.email)\r\n      }}>\r\n        Забронировать\r\n      </Button>\r\n    </Container>\r\n  </Grid>\r\n}","C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\RestaurantCard.tsx",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\TableTimeTracker.tsx",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\Emailnput.tsx",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\Pickers.tsx",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\SearchButton.tsx",[],"C:\\Users\\Skyre\\WebstormProjects\\web-dhtml\\src\\ConfirmationCodeModal.tsx",["76"],"import {Button, Input, Modal, TextField} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport './confirm_modal.css'\r\n\r\nexport function ConfirmationCodeModal({awaitingCode, sendConfirm, closeModal}: {\r\n  awaitingCode: boolean;\r\n  sendConfirm: (code: number) => void;\r\n  closeModal: () => void;\r\n}) {\r\n  const [value, setValue] = useState<string>(\"\")\r\n  return <Modal\r\n    open={awaitingCode}\r\n    onClose={closeModal}\r\n    aria-labelledby=\"simple-modal-title\"\r\n    aria-describedby=\"simple-modal-description\">\r\n    {<div className={\"modal\"}>\r\n      <h4 id=\"simple-modal-title\">Введите код из письма, отправленного на указаный вами адрес</h4>\r\n      <TextField className={\"codeInput\"} label={\"Confirmation code\"} value={value} onChange={e => setValue(e.target.value.replace(/[^0-9]/, ''))}/>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={() => sendConfirm(+value)}>\r\n        Подтвердить бронь\r\n      </Button>\r\n    </div>}\r\n  </Modal>\r\n}",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":16,"nodeType":"83","messageId":"84","endLine":1,"endColumn":24},{"ruleId":"81","severity":1,"message":"85","line":3,"column":39,"nodeType":"83","messageId":"84","endLine":3,"endColumn":43},{"ruleId":"81","severity":1,"message":"86","line":3,"column":3,"nodeType":"83","messageId":"84","endLine":3,"endColumn":9},{"ruleId":"81","severity":1,"message":"87","line":4,"column":9,"nodeType":"83","messageId":"84","endLine":4,"endColumn":17},{"ruleId":"81","severity":1,"message":"88","line":5,"column":9,"nodeType":"83","messageId":"84","endLine":5,"endColumn":14},{"ruleId":"81","severity":1,"message":"89","line":5,"column":24,"nodeType":"83","messageId":"84","endLine":5,"endColumn":33},{"ruleId":"81","severity":1,"message":"90","line":7,"column":9,"nodeType":"83","messageId":"84","endLine":7,"endColumn":27},{"ruleId":"81","severity":1,"message":"91","line":7,"column":29,"nodeType":"83","messageId":"84","endLine":7,"endColumn":47},{"ruleId":"81","severity":1,"message":"92","line":8,"column":9,"nodeType":"83","messageId":"84","endLine":8,"endColumn":30},{"ruleId":"81","severity":1,"message":"93","line":2,"column":9,"nodeType":"83","messageId":"84","endLine":2,"endColumn":13},{"ruleId":"81","severity":1,"message":"94","line":2,"column":15,"nodeType":"83","messageId":"84","endLine":2,"endColumn":23},{"ruleId":"81","severity":1,"message":"95","line":2,"column":25,"nodeType":"83","messageId":"84","endLine":2,"endColumn":37},{"ruleId":"81","severity":1,"message":"89","line":1,"column":40,"nodeType":"83","messageId":"84","endLine":1,"endColumn":49},{"ruleId":"81","severity":1,"message":"90","line":7,"column":9,"nodeType":"83","messageId":"84","endLine":7,"endColumn":27},{"ruleId":"81","severity":1,"message":"85","line":9,"column":9,"nodeType":"83","messageId":"84","endLine":9,"endColumn":13},{"ruleId":"81","severity":1,"message":"96","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":22},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'TextField' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'MaterialUiPickersDate' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Input' is defined but never used.","no-global-assign","no-unsafe-negation"]